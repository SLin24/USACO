#include <bits/stdc++.h>
#include <iostream>
using namespace std;
typedef long long ll;


struct DSU {
    vector<int> p;
    vector<int> color;
    vector<int> adj[1000];
    //0 for truth and 1 for liar
    void init(int N) {
        p = vector<int>(N, -1);
        color = vector<int>(N, -1);
        for (int i = 0; i < N; i++) {
            adj[i].push_back(i);
        }
    }
    int get(int a) {return (p[a] < 0)?a:p[a] = get(p[a]);}
    void replace(int a) {
        for (int i = 0; i < adj[a].size(); i++) {
            if (color[adj[a][i]] == 0) {
                color[adj[a][i]] = 1;
            } else {
                color[adj[a][i]] = 0;
            }
        }
    }
    bool unite(int a, int b, bool truth) {
        int node1 = a, node2 = b;
        a = get(a); b = get(b);
        if (a == b) {
            if ((truth && color[node1] != color[node2]) || (!truth && color[node1] == color[node2])) {
                return false;
            } else {
                return true;
            }
        }
        if (p[a] > p[b]) {
            swap(a, b);
            swap(node1, node2);
        }
        if (color[node1] == -1) {
            color[node1] = 0;
        }
        if (color[node2] == -1) {
            color[node2] = 0;
        }
        if ((truth && color[node1] != color[node2]) || (!truth && color[node1] == color[node2])) {
            replace(b);
        }
        for (int i = 0; i < adj[b].size(); i++) {
            adj[a].push_back(adj[b][i]);
        }
        p[a] += p[b]; p[b] = a;
        return true;
    }
};
int main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL);
    freopen("truth.in", "r", stdin);
    freopen("truth.out", "w", stdout);

    int n, m; cin >> n >> m;


    vector<pair<pair<int, int>, bool>> instructions;

    for (int i = 0; i < m; i++) {
        int a, b; cin >> a >> b; a--; b--;
        bool truth; 
        char type; cin >> type;
        if (type == 'T') {
            truth = true;
        } else {
            truth = false;
        }
        instructions.emplace_back(make_pair(make_pair(a, b), truth));
    }

    DSU D;
    D.init(n);
    int cnt = 0;
    for (int i = 0; i < m; i++) {
        if (D.unite(instructions[i].first.first, instructions[i].first.second, instructions[i].second)) {
            cnt++;
            continue;
        } else {
            break;
        }
    }
    cout << cnt << '\n';


}
